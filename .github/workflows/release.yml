# 可选，将显示在 GitHub 存储库的“操作”选项卡中的工作流名称
name: Release CI

# 指定此工作流的触发器
on:
  push:
    # 匹配特定标签 (refs/tags)
    tags:
      - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# 需要运行的作业组合
jobs:
  # 任务：创建 release 版本
  create-release:
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_ID: ${{ steps.create_release.outputs.id }}

    steps:
      - uses: actions/checkout@v2
      # 查询版本号（tag）
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:10}"
          echo ::set-output name=version::"${GITHUB_REF:10}"

      # 根据查询到的版本号创建 release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 'app-${{ steps.get_version.outputs.VERSION }}'
          release_name: 'app ${{ steps.get_version.outputs.VERSION }}'
          body: 'See the assets to download this version and install.'
          draft: true
          prerelease: false
  # 编译 Tauri
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - platform: 
            buildFolder: bundle/deb
            ext: amd64.deb
            compressed: ''
          - platform: macos-latest
            buildFolder: bundle/dmg
            ext: .dmg
            compressed: .tgz
          - platform: windows-latest
            buildFolder: ''
            ext: .msi
            compressed: ''
    runs-on: ${{ matrix.platform }}        
    steps:
      - uses: actions/checkout@v2
      # 安装 Node.js
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # 安装 Rust
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      # 使用 Rust 缓存，加快安装速度
      - uses: Swatinem/rust-cache@v1

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      # 可选，如果需要将 Rust 编译为 wasm，则安装 wasm-pack
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          # Optional version of wasm-pack to install(eg. 'v0.9.1', 'latest')
          version: v0.9.1

      # 可选，如果需要使用 rsw 构建 wasm，则安装 rsw
      - name: Install rsw
        run: cargo install rsw

      # 获取 yarn 缓存路径
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      # 使用 yarn 缓存
      - name: Yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # 安装依赖执行构建，以及推送 github release
      - name: Install app dependencies and build it
        run: yarn && yarn build
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.RELEASE_UPLOAD_ID }}

# name: "Release CI"
# # on:
# #   push:
# #     branches:
# #       - release
# # # 指定此工作流的触发器
# on:
#   push:
#     # 匹配特定标签 (refs/tags)
#     tags:
#       - 'v*' # 推送事件匹配 v*, 例如 v1.0，v20.15.10 等来触发工作流

# jobs:
#   check-build:
#     runs-on: ubuntu-latest
#     timeout-minutes: 30
#     steps:
#       - uses: actions/checkout@v2
#       - name: setup node
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16
#       - name: install rust stable
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           profile: minimal
#       - name: install webkit2gtk
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y webkit2gtk-4.0
#       - run: yarn
#       - name: build nota for tauri app
#         run: yarn build
#       - run: cargo install tauri-bundler --force
#       - name: build tauri app
#         run: yarn tauri:build
#   create-release:
#     needs: check-build
#     runs-on: ubuntu-latest
#     outputs:
#       RELEASE_UPLOAD_URL: ${{ steps.create_tauri_release.outputs.upload_url }}
#     steps:
#       - uses: actions/checkout@v2
#       - name: setup node
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16
#       - name: get version
#         run: echo ::set-env name=PACKAGE_VERSION::$(node -p "require('./package.json').version")
#       - name: create release
#         id: create_tauri_release
#         uses: jbolda/create-release@v1.1.0
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ matrix.package.name }}-v${{ env.PACKAGE_VERSION }}
#           release_name: 'Release nota app v${{ env.PACKAGE_VERSION }}'
#           body: 'See the assets to download this version and install.'
#           draft: true
#           prerelease: false
#   create-and-upload-assets:
#     needs: create-release
#     runs-on: ${{ matrix.platform }}
#     timeout-minutes: 30
#     strategy:
#       fail-fast: false
#       matrix:
#         platform: [, macos-latest, windows-latest]
#         include:
#           - platform: 
#             buildFolder: bundle/deb
#             ext: amd64.deb
#             compressed: ''
#           - platform: macos-latest
#             buildFolder: bundle/dmg
#             ext: .app
#             compressed: .tgz
#           - platform: windows-latest
#             buildFolder: ''
#             ext: .x64_en-US.msi
#             compressed: ''
#     steps:
#       - uses: actions/checkout@v2
#       - name: setup node
#         uses: actions/setup-node@v1
#         with:
#           node-version: 16
#       - name: install rust stable
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: stable
#           profile: minimal
#       - name: install webkit2gtk (ubuntu only)
#         if: matrix.platform == ''
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y webkit2gtk-4.0
#       - run: yarn
#       - name: build nota for tauri app
#         run: yarn build
#       - run: cargo install tauri-bundler --force
#       - name: build tauri app
#         run: yarn tauri:build
#       - name: compress (macos only)
#         if: matrix.platform == 'macos-latest'
#         working-directory: ${{ format('./src-tauri/target/release/{0}', matrix.buildFolder ) }}
#         run: tar -czf ${{ format('nota{0}{1}', matrix.ext, matrix.compressed ) }} ${{ format('nota{0}', matrix.ext ) }}
#       - name: upload release asset
#         id: upload-release-asset
#         uses: actions/upload-release-asset@v1.0.2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
#           asset_path: ${{ format('./src-tauri/target/release/{0}/nota{1}{2}', matrix.buildFolder, matrix.ext, matrix.compressed ) }}
#           asset_name: ${{ format('nota{0}{1}', matrix.ext, matrix.compressed ) }}
#           asset_content_type: application/zip
#       - name: build tauri app in debug mode
#         run: yarn tauri:build --debug
#       - name: compress (macos only)
#         if: matrix.platform == 'macos-latest'
#         working-directory: ${{ format('./src-tauri/target/debug/{0}', matrix.buildFolder ) }}
#         run: tar -czf ${{ format('nota{0}{1}', matrix.ext, matrix.compressed ) }} ${{ format('nota{0}', matrix.ext ) }}
#       - name: upload release asset with debug mode on
#         id: upload-release-asset-debug-mode
#         uses: actions/upload-release-asset@v1.0.2
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
#           asset_path: ${{ format('./src-tauri/target/debug/{0}/nota{1}{2}', matrix.buildFolder, matrix.ext, matrix.compressed ) }}
#           asset_name: ${{ format('nota-debug{0}{1}', matrix.ext, matrix.compressed ) }}
#           asset_content_type: application/zip